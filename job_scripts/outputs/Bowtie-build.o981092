Settings:
  Output files: "/scratch365/crivaldi/data/M_fascicularis/M_fascicularis.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /scratch365/crivaldi/data/M_fascicularis/GCF_000364345.1_Macaca_fascicularis_5.0_genomic.fna
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:47
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:29
bmax according to bmaxDivN setting: 700966596
Using parameters --bmax 525724947 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 525724947 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:02:27
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:28
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:01:01
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:03:19
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:02:48
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.50483e+08 (target: 525724946)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (525724947) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:48
  Sorting block of length 468829424
  (Using difference cover)
  Sorting block time: 00:05:36
Returning block of 468829425
Getting block 2 of 8
  Reserving size (525724947) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:55
  Sorting block of length 186042791
  (Using difference cover)
  Sorting block time: 00:02:15
Returning block of 186042792
Getting block 3 of 8
  Reserving size (525724947) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:01:01
  Sorting block of length 388930771
  (Using difference cover)
  Sorting block time: 00:03:57
Returning block of 388930772
Getting block 4 of 8
  Reserving size (525724947) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:01:01
  Sorting block of length 233162307
  (Using difference cover)
  Sorting block time: 00:02:29
Returning block of 233162308
Getting block 5 of 8
  Reserving size (525724947) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:01:11
  Sorting block of length 461206907
  (Using difference cover)
  Sorting block time: 00:05:00
Returning block of 461206908
Getting block 6 of 8
  Reserving size (525724947) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:01:16
  Sorting block of length 500937368
  (Using difference cover)
  Sorting block time: 00:06:29
Returning block of 500937369
Getting block 7 of 8
  Reserving size (525724947) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:01:12
  Sorting block of length 452620363
  (Using difference cover)
  Sorting block time: 00:05:54
Returning block of 452620364
Getting block 8 of 8
  Reserving size (525724947) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:43
  Sorting block of length 112136447
  (Using difference cover)
  Sorting block time: 00:01:22
Returning block of 112136448
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 827634432
fchr[G]: 1400737765
fchr[T]: 1974442142
fchr[$]: 2803866385
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 940898052 bytes to primary EBWT file: /scratch365/crivaldi/data/M_fascicularis/M_fascicularis.1.bt2
Wrote 700966604 bytes to secondary EBWT file: /scratch365/crivaldi/data/M_fascicularis/M_fascicularis.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2803866385
    bwtLen: 2803866386
    sz: 700966597
    bwtSz: 700966597
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 175241650
    offsSz: 700966600
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14603471
    numLines: 14603471
    ebwtTotLen: 934622144
    ebwtTotSz: 934622144
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 01:11:15
Reading reference sizes
  Time reading reference sizes: 00:00:32
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:29
  Time to reverse reference sequence: 00:00:04
bmax according to bmaxDivN setting: 700966596
Using parameters --bmax 525724947 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 525724947 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:01:55
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:23
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:58
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:03:30
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.50483e+08 (target: 525724946)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (525724947) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:41
  Sorting block of length 79431469
  (Using difference cover)
  Sorting block time: 00:00:46
Returning block of 79431470
Getting block 2 of 8
  Reserving size (525724947) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:56
  Sorting block of length 453596586
  (Using difference cover)
  Sorting block time: 00:04:17
Returning block of 453596587
Getting block 3 of 8
  Reserving size (525724947) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:01:01
  Sorting block of length 500276449
  (Using difference cover)
  Sorting block time: 00:04:44
Returning block of 500276450
Getting block 4 of 8
  Reserving size (525724947) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:01:11
  Sorting block of length 407769528
  (Using difference cover)
  Sorting block time: 00:04:24
Returning block of 407769529
Getting block 5 of 8
  Reserving size (525724947) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:01:09
  Sorting block of length 445246935
  (Using difference cover)
  Sorting block time: 00:04:53
Returning block of 445246936
Getting block 6 of 8
  Reserving size (525724947) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:01:18
  Sorting block of length 390930365
  (Using difference cover)
  Sorting block time: 00:04:16
Returning block of 390930366
Getting block 7 of 8
  Reserving size (525724947) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:01:14
  Sorting block of length 445941818
  (Using difference cover)
  Sorting block time: 00:04:41
Returning block of 445941819
Getting block 8 of 8
  Reserving size (525724947) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:42
  Sorting block of length 80673228
  (Using difference cover)
  Sorting block time: 00:00:49
Returning block of 80673229
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 827634432
fchr[G]: 1400737765
fchr[T]: 1974442142
fchr[$]: 2803866385
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 940898052 bytes to primary EBWT file: /scratch365/crivaldi/data/M_fascicularis/M_fascicularis.rev.1.bt2
Wrote 700966604 bytes to secondary EBWT file: /scratch365/crivaldi/data/M_fascicularis/M_fascicularis.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2803866385
    bwtLen: 2803866386
    sz: 700966597
    bwtSz: 700966597
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 175241650
    offsSz: 700966600
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14603471
    numLines: 14603471
    ebwtTotLen: 934622144
    ebwtTotSz: 934622144
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:53:57
