Settings:
  Output files: "zebrafishh.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  GCA_000002035.3_GRCz10_genomic.fna
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:29
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:18
bmax according to bmaxDivN setting: 342403830
Using parameters --bmax 256802873 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 256802873 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:01:13
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:15
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:23
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:01:37
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.95659e+08 (target: 256802872)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (256802873) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:24
  Sorting block of length 184262883
  (Using difference cover)
  Sorting block time: 00:03:22
Returning block of 184262884
Getting block 2 of 7
  Reserving size (256802873) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:31
  Sorting block of length 228667075
  (Using difference cover)
  Sorting block time: 00:04:24
Returning block of 228667076
Getting block 3 of 7
  Reserving size (256802873) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:30
  Sorting block of length 130374127
  (Using difference cover)
  Sorting block time: 00:02:28
Returning block of 130374128
Getting block 4 of 7
  Reserving size (256802873) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:33
  Sorting block of length 242792701
  (Using difference cover)
  Sorting block time: 00:04:53
Returning block of 242792702
Getting block 5 of 7
  Reserving size (256802873) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:37
  Sorting block of length 214723569
  (Using difference cover)
  Sorting block time: 00:04:11
Returning block of 214723570
Getting block 6 of 7
  Reserving size (256802873) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:36
  Sorting block of length 241022983
  (Using difference cover)
  Sorting block time: 00:04:39
Returning block of 241022984
Getting block 7 of 7
  Reserving size (256802873) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:22
  Sorting block of length 127771978
  (Using difference cover)
  Sorting block time: 00:02:23
Returning block of 127771979
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 434184257
fchr[G]: 685100406
fchr[T]: 936010898
fchr[$]: 1369615322
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 461115793 bytes to primary EBWT file: zebrafishh.1.bt2
Wrote 342403836 bytes to secondary EBWT file: zebrafishh.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 1369615322
    bwtLen: 1369615323
    sz: 342403831
    bwtSz: 342403831
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 85600958
    offsSz: 342403832
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 7133414
    numLines: 7133414
    ebwtTotLen: 456538496
    ebwtTotSz: 456538496
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:38:48
Reading reference sizes
  Time reading reference sizes: 00:00:18
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:16
  Time to reverse reference sequence: 00:00:03
bmax according to bmaxDivN setting: 342403830
Using parameters --bmax 256802873 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 256802873 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:01:13
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:13
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:23
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:01:40
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 5; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:01:38
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.52179e+08 (target: 256802872)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 9
  Reserving size (256802873) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:24
  Sorting block of length 156248537
  (Using difference cover)
  Sorting block time: 00:02:49
Returning block of 156248538
Getting block 2 of 9
  Reserving size (256802873) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:28
  Sorting block of length 148855779
  (Using difference cover)
  Sorting block time: 00:02:50
Returning block of 148855780
Getting block 3 of 9
  Reserving size (256802873) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:29
  Sorting block of length 129886099
  (Using difference cover)
  Sorting block time: 00:02:22
Returning block of 129886100
Getting block 4 of 9
  Reserving size (256802873) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:31
  Sorting block of length 191663169
  (Using difference cover)
  Sorting block time: 00:03:46
Returning block of 191663170
Getting block 5 of 9
  Reserving size (256802873) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:34
  Sorting block of length 183429910
  (Using difference cover)
  Sorting block time: 00:03:38
Returning block of 183429911
Getting block 6 of 9
  Reserving size (256802873) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:32
  Sorting block of length 107226221
  (Using difference cover)
  Sorting block time: 00:02:02
Returning block of 107226222
Getting block 7 of 9
  Reserving size (256802873) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:37
  Sorting block of length 173096574
  (Using difference cover)
  Sorting block time: 00:03:12
Returning block of 173096575
Getting block 8 of 9
  Reserving size (256802873) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:35
  Sorting block of length 88601832
  (Using difference cover)
  Sorting block time: 00:01:43
Returning block of 88601833
Getting block 9 of 9
  Reserving size (256802873) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:24
  Sorting block of length 190607193
  (Using difference cover)
  Sorting block time: 00:03:33
Returning block of 190607194
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 434184257
fchr[G]: 685100406
fchr[T]: 936010898
fchr[$]: 1369615322
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 461115793 bytes to primary EBWT file: zebrafishh.rev.1.bt2
Wrote 342403836 bytes to secondary EBWT file: zebrafishh.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 1369615322
    bwtLen: 1369615323
    sz: 342403831
    bwtSz: 342403831
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 85600958
    offsSz: 342403832
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 7133414
    numLines: 7133414
    ebwtTotLen: 456538496
    ebwtTotSz: 456538496
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:40:44
