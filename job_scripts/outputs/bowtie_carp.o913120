Settings:
  Output files: "C_carpio.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  GCA_000951615.1_common_carp_genome_genomic.fna
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:37
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:23
bmax according to bmaxDivN setting: 417590869
Using parameters --bmax 313193152 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 313193152 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:01:13
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:11
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:27
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:02:10
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:01:44
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2.38623e+08 (target: 313193151)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (313193152) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:32
  Sorting block of length 259442654
  (Using difference cover)
  Sorting block time: 00:04:05
Returning block of 259442655
Getting block 2 of 7
  Reserving size (313193152) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:46
  Sorting block of length 188376345
  (Using difference cover)
  Sorting block time: 00:02:50
Returning block of 188376346
Getting block 3 of 7
  Reserving size (313193152) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:43
  Sorting block of length 282616581
  (Using difference cover)
  Sorting block time: 00:04:20
Returning block of 282616582
Getting block 4 of 7
  Reserving size (313193152) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:57
  Sorting block of length 186069680
  (Using difference cover)
  Sorting block time: 00:03:33
Returning block of 186069681
Getting block 5 of 7
  Reserving size (313193152) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:01:15
  Sorting block of length 183262605
  (Using difference cover)
  Sorting block time: 00:03:30
Returning block of 183262606
Getting block 6 of 7
  Reserving size (313193152) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:51
  Sorting block of length 265710983
  (Using difference cover)
  Sorting block time: 00:04:01
Returning block of 265710984
Getting block 7 of 7
  Reserving size (313193152) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:40
  Sorting block of length 304884623
  (Using difference cover)
  Sorting block time: 00:04:19
Returning block of 304884624
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 526223309
fchr[G]: 835238145
fchr[T]: 1144196031
fchr[$]: 1670363477
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 562597085 bytes to primary EBWT file: C_carpio.1.bt2
Wrote 417590876 bytes to secondary EBWT file: C_carpio.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 1670363477
    bwtLen: 1670363478
    sz: 417590870
    bwtSz: 417590870
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 104397718
    offsSz: 417590872
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 8699810
    numLines: 8699810
    ebwtTotLen: 556787840
    ebwtTotSz: 556787840
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:44:42
Reading reference sizes
  Time reading reference sizes: 00:00:26
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:23
  Time to reverse reference sequence: 00:00:03
bmax according to bmaxDivN setting: 417590869
Using parameters --bmax 313193152 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 313193152 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:01:29
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:14
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:34
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:02:15
Splitting and merging
  Splitting and merging time: 00:00:00
Split 3, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:01:56
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 4; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:02:09
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:02:26
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 2; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:02:25
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2.08795e+08 (target: 313193151)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (313193152) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:56
  Sorting block of length 265051849
  (Using difference cover)
  Sorting block time: 00:04:31
Returning block of 265051850
Getting block 2 of 8
  Reserving size (313193152) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:46
  Sorting block of length 210805787
  (Using difference cover)
  Sorting block time: 00:03:34
Returning block of 210805788
Getting block 3 of 8
  Reserving size (313193152) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:44
  Sorting block of length 136608623
  (Using difference cover)
  Sorting block time: 00:02:09
Returning block of 136608624
Getting block 4 of 8
  Reserving size (313193152) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:55
  Sorting block of length 289035029
  (Using difference cover)
  Sorting block time: 00:04:36
Returning block of 289035030
Getting block 5 of 8
  Reserving size (313193152) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:46
  Sorting block of length 156214327
  (Using difference cover)
  Sorting block time: 00:02:51
Returning block of 156214328
Getting block 6 of 8
  Reserving size (313193152) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:01:09
  Sorting block of length 199597365
  (Using difference cover)
  Sorting block time: 00:04:02
Returning block of 199597366
Getting block 7 of 8
  Reserving size (313193152) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:58
  Sorting block of length 125300227
  (Using difference cover)
  Sorting block time: 00:02:13
Returning block of 125300228
Getting block 8 of 8
  Reserving size (313193152) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:39
  Sorting block of length 287750263
  (Using difference cover)
  Sorting block time: 00:04:29
Returning block of 287750264
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 526223309
fchr[G]: 835238145
fchr[T]: 1144196031
fchr[$]: 1670363477
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 562597085 bytes to primary EBWT file: C_carpio.rev.1.bt2
Wrote 417590876 bytes to secondary EBWT file: C_carpio.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 1670363477
    bwtLen: 1670363478
    sz: 417590870
    bwtSz: 417590870
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 104397718
    offsSz: 417590872
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 8699810
    numLines: 8699810
    ebwtTotLen: 556787840
    ebwtTotSz: 556787840
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:55:19
19923 reads; of these:
  19923 (100.00%) were unpaired; of these:
    11586 (58.15%) aligned 0 times
    286 (1.44%) aligned exactly 1 time
    8051 (40.41%) aligned >1 times
41.85% overall alignment rate
